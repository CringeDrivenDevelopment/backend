// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PlaylistRole string

const (
	PlaylistRoleViewer    PlaylistRole = "viewer"
	PlaylistRoleModerator PlaylistRole = "moderator"
	PlaylistRoleOwner     PlaylistRole = "owner"
	PlaylistRoleGroup     PlaylistRole = "group"
)

func (e *PlaylistRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlaylistRole(s)
	case string:
		*e = PlaylistRole(s)
	default:
		return fmt.Errorf("unsupported scan type for PlaylistRole: %T", src)
	}
	return nil
}

type NullPlaylistRole struct {
	PlaylistRole PlaylistRole
	Valid        bool // Valid is true if PlaylistRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlaylistRole) Scan(value interface{}) error {
	if value == nil {
		ns.PlaylistRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlaylistRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlaylistRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlaylistRole), nil
}

type PlaylistType string

const (
	PlaylistTypeSpotify    PlaylistType = "spotify"
	PlaylistTypeYoutube    PlaylistType = "youtube"
	PlaylistTypeYandex     PlaylistType = "yandex"
	PlaylistTypeDeezer     PlaylistType = "deezer"
	PlaylistTypeSoundcloud PlaylistType = "soundcloud"
	PlaylistTypeUnknown    PlaylistType = "unknown"
)

func (e *PlaylistType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlaylistType(s)
	case string:
		*e = PlaylistType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlaylistType: %T", src)
	}
	return nil
}

type NullPlaylistType struct {
	PlaylistType PlaylistType
	Valid        bool // Valid is true if PlaylistType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlaylistType) Scan(value interface{}) error {
	if value == nil {
		ns.PlaylistType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlaylistType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlaylistType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlaylistType), nil
}

type Playlist struct {
	ID            string
	Title         string
	Thumbnail     string
	Type          NullPlaylistType
	ExternalID    pgtype.Text
	Tracks        []string
	AllowedTracks []string
	Count         pgtype.Int4
	AllowedCount  pgtype.Int4
	Time          int32
}

type PlaylistPermission struct {
	PlaylistID string
	UserID     int64
	Role       PlaylistRole
}

type Track struct {
	ID        string
	Title     string
	Authors   string
	Thumbnail string
	Length    int32
	Explicit  bool
}

type User struct {
	ID int64
}
